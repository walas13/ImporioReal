#! / bin / bash -e
# Este script é uma experiência para clonar litecoin em um
# nova moeda + blockchain.
# O script executará as seguintes etapas:
# 1) crie primeiro uma imagem docker com o ubuntu pronto para construir e executar o novo daemon de moedas
# 2) clone GenesisH0 e meus blocos de gênese de redes principais, teste e regtest no container (isso pode levar muito tempo)
# 3) clone litecoin
# 4) substituir variáveis ​​(chaves, hashes da árvore de tornozelo, timestamps ..)
# 5) construir nova moeda
# 6) execute 4 nós docker e conecte um ao outro
# 
# Por padrão, o script usa a rede regtest, que pode bloquear minas
# instantaneamente. Se você deseja mudar para a rede principal, simplesmente mude o
# CHAIN ​​variável abaixo

# altere as seguintes variáveis ​​para corresponder à sua nova moeda
COIN_NAME = " MyCoin "
COIN_UNIT = " MYC "
# 42 milhões de moedas no total (a oferta total de litecoin é 84000000)
TOTAL_SUPPLY = 42000000
MAINNET_PORT = " 54321 "
TESTNET_PORT = " 54322 "
PHRASE = " Algumas manchetes de jornal que descrevem algo que aconteceu hoje "
# Primeira letra do endereço da carteira. Verifique https://en.bitcoin.it/wiki/Base58Check_encoding
PUBKEY_CHAR = " 20 "
# Número de blocos que esperar para ser capaz de passar coinbase UTXO de
COINBASE_MATURITY = 100
# deixe a CHAIN ​​vazia para a rede principal, -regte para a rede de regressão e -testnet para a rede de teste
CHAIN ​​= " -regtest "
# esta é a quantidade de moedas para obter como recompensa de mineração do bloco de altura 1. Se não for definido, o valor padrão será 50
# PREMINED_AMOUNT = 10000

# aviso: mude isto para o seu próprio pubkey para obter a recompensa de mineração do bloco de gênese
GENESIS_REWARD_PUBKEY = 044e0d4bc823e20e14d66396a64960c993585400c53f1e6decb273f249bfeba0e71f140ffa7316f2cdaaae574e7d72620538c3e7791ae9861dfe84dd2955fc85e8

# não altere as seguintes variáveis, a menos que você saiba o que está fazendo
LITECOIN_BRANCH = 0,14
GENESISHZERO_REPOS = https: //github.com/lhartikk/GenesisH0
LITECOIN_REPOS = https: //github.com/litecoin-project/litecoin.git
LITECOIN_PUB_KEY = 040184710fa689ad5023690c80f3a49c8f13f8d45b8c857fbcbc8bc4a8e4d3eb4b10f4d4604fa08dce601aaf0f470216fe1b51850b4acf21b179c45070ac7b03a9
LITECOIN_MERKLE_HASH = 97ddfbbae6be97fd6cdf3e7ca13232a3afff2353e29badfab7f73011edd4ced9
LITECOIN_MAIN_GENESIS_HASH = 12a765e31ffd4059bada1e25190f6e98c99d9714d334efa41a195a7e7e04bfe2
LITECOIN_TEST_GENESIS_HASH = 4966625a4b2851d9fdee139e56211a0d88575f59ed816ff5e6a63deb4e3e29a0
LITECOIN_REGTEST_GENESIS_HASH = 530827f38f93b43ed12af0b3ad25a288dc02ed74d6d7857862df51fc56c416f9
MINIMUM_CHAIN_WORK_MAIN = 0x000000000000000000000000000000000000000000000006805c7318ce2736c0
MINIMUM_CHAIN_WORK_TEST = 0x000000000000000000000000000000000000000000000000000000054cb9e7a0
COIN_NAME_LOWER = $ ( echo $ COIN_NAME  | tr ' [: upper:] '  ' [: lower:] ' )
COIN_NAME_UPPER = $ ( echo $ COIN_NAME  | tr ' [: lower:] '  ' [: upper:] ' )
DIRNAME = $ ( dirname $ 0 )
DOCKER_NETWORK = " 172.18.0 "
DOCKER_IMAGE_LABEL = " newcoin-env "
OSVERSION = " $ ( uname -s ) "

docker_build_image ()
{
    IMAGE = $ ( imagens do docker -q $ DOCKER_IMAGE_LABEL )
    if [ -z  $ IMAGE ] ;  então
        imagem do docker do edifício do eco
        se [ !  -f  $ DOCKER_IMAGE_LABEL / Dockerfile] ;  então
            mkdir -p $ DOCKER_IMAGE_LABEL
            cat << EOF > $ DOCKER_IMAGE_LABEL / Dockerfile
A partir do Ubuntu: 16.04
RUN eco deb http://ppa.launchpad.net/bitcoin/bitcoin/ubuntu xenial principal >> /etc/apt/sources.list
EXECUÇÃO apt-key adv --keyserver hkp: //keyserver.ubuntu.com: 80 --recv D46F45428842CE5E
RUN apt-get update
RUN apt-get -y instalar ccache git libboost-system1.58.0 libboost-filesystem1.58.0 libboost-program-options1.58.0 libboost-thread1.58.0 libboost-chrono1.58.0 libsl1.0.0 libevent-pthreads-2.0-5 libevent-2.0- 5 build-essential libtool autotools-dev automake pkg-config libssl-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread- dev libdb4.8-dev libdb4.8 ++ - dev libminiupnpc-dev libzmq3-dev libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compilador libqrencode-dev python-pip
Execução da instalação do pip RUN == 2.5.2 scrypt
EOF
        fi 
        docker build --label $ DOCKER_IMAGE_LABEL --tag $ DOCKER_IMAGE_LABEL  $ DIRNAME / $ DOCKER_IMAGE_LABEL /
    outro
        imagem do Docker de eco já construída
    fi
}

docker_run_genesis ()
{
    mkdir -p $ DIRNAME /.ccache
    docker run -v $ DIRNAME / GenesisH0: / GenesisH0 $ DOCKER_IMAGE_LABEL / bin / bash -c " $ 1 "
}

docker_run ()
{
    mkdir -p $ DIRNAME /.ccache
    docker run -v $ DIRNAME / GenesisH0: / GenesisH0 -v $ DIRNAME /.ccache:/root/.ccache -v $ DIRNAME / $ COIN_NAME_LOWER : / $ COIN_NAME_LOWER  $ DOCKER_IMAGE_LABEL / bin / bash -c " $ 1 "
}

docker_stop_nodes ()
{
    echo  " Parando todos os nós do docker "
    para  id  em  $ ( docker ps -q -a -f ancestor = $ DOCKER_IMAGE_LABEL ) ;  Faz
        docker stop $ id
    feito
}

docker_remove_nodes ()
{
    echo  " Removendo todos os nós do docker "
    para  id  em  $ ( docker ps -q -a -f ancestor = $ DOCKER_IMAGE_LABEL ) ;  Faz
        docker rm $ id
    feito
}

docker_create_network ()
{
    echo  " Criando rede docker "
    se  ! rede docker inspecionar newcoin & > / dev / null ;  então
        rede docker create --subnet = $ DOCKER_NETWORK .0 / 16 newcoin
    fi
}

docker_remove_network ()
{
    echo  " Removendo a rede docker "
    rede docker rm newcoin
}

docker_run_node ()
{
    locais NODE_NUMBER = $ 1
    local NODE_COMMAND = $ 2
    mkdir -p $ DIRNAME / miner $ {NODE_NUMBER}
    se [ !  -f  $ DIRNAME / miner $ {NODE_NUMBER} / $ COIN_NAME_LOWER .conf] ;  então
        cat << EOF > $ DIRNAME / miner $ {NODE_NUMBER} / $ COIN_NAME_LOWER.conf
rpcuser = $ {COIN_NAME_LOWER} rpc
rpcpassword = $ (cat / dev / urandom | env LC_CTYPE = C tr -dc a-zA-Z0-9 | head -c 32; echo)
EOF
    fi

    execução do docker --net newcoin --ip $ DOCKER_NETWORK . $ {NODE_NUMBER} -v $ DIRNAME / miner $ {NODE_NUMBER} : / root /. $ COIN_NAME_LOWER -v $ DIRNAME / $ COIN_NAME_LOWER : / $ COIN_NAME_LOWER  $ DOCKER_IMAGE_LABEL / bin / bash -c " $ NODE_COMMAND "
}

generate_genesis_block ()
{
    se [ !  -d Genesis H0] ;  então
        git clone $ GENESISHZERO_REPOS
        pushd GenesisH0
    outro
        pushd GenesisH0
        git pull
    fi

    se [ !  -f  $ {COIN_NAME} -main.txt] ;  então
        echo  " Mining genesis block ... este procedimento pode levar muitas horas de trabalho cpu .. "
        docker_run_genesis " python /GenesisH0/genesis.py -a scrypt -z \" $ PHRASE \ " -p $ GENESIS_REWARD_PUBKEY 2> & 1 | tee / GenesisH0 / $ {COIN_NAME} -main.txt "
    outro
        eco  " Bloco de Gênesis já minado .. "
        cat $ {COIN_NAME} -main.txt
    fi

    se [ !  -f  $ {COIN_NAME} -test.txt] ;  então
        eco  " Bloco de gênese de mineração de rede de teste ... este procedimento pode levar muitas horas de trabalho cpu .. "
        docker_run_genesis " python /GenesisH0/genesis.py -t 1486949366 -a scrypt -z \" $ PHRASE \ " -p $ GENESIS_REWARD_PUBKEY 2> & 1 | tee / GenesisH0 / $ {COIN_NAME} -test.txt "
    outro
        eco  " Bloco de Gênesis já minado .. "
        cat $ {COIN_NAME} -test.txt
    fi

    se [ !  -f  $ {COIN_NAME} -regtest.txt] ;  então
        echo  " Bloco de gênese de mineração da rede mais próxima ... este procedimento pode levar muitas horas de trabalho da CPU .. "
        docker_run_genesis " python /GenesisH0/genesis.py -t 1296688602 -b 0x207fffff -n 0 -a scrypt -z \" $ PHRASE \ " -p $ GENESIS_REWARD_PUBKEY 2> & 1 | tee / GenesisH0 / $ {COIN_NAME} -regtest.txt "
    outro
        eco  " Bloco de Gênesis já minado .. "
        cat $ {COIN_NAME} -regtest.txt
    fi

    MAIN_PUB_KEY = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ pubkey: "  |  $ SED  ' s / ^ pubkey: // ' )
    MERKLE_HASH = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ hash do merkle: "  |  $ SED  ' s / ^ merkle hash: // ' )
    TIMESTAMP = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ tempo: "  |  $ SED  ' s / ^ tempo: // ' )
    BITS = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ bits: "  |  $ SED  ' s / ^ bits: // ' )

    MAIN_NONCE = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ nonce: "  |  $ SED  ' s / ^ nonce: // ' )
    TEST_NONCE = $ ( cat $ {COIN_NAME} -test.txt | grep " ^ nonce: "  |  $ SED  ' s / ^ nonce: // ' )
    REGTEST_NONCE = $ ( cat $ {COIN_NAME} -regtest.txt | grep " ^ nonce: "  |  $ SED  ' s / ^ nonce: // ' )

    MAIN_GENESIS_HASH = $ ( cat $ {COIN_NAME} -main.txt | grep " ^ hash do genesis: "  |  $ SED  ' s / ^ genesis hash: // ' )
    TEST_GENESIS_HASH = $ ( cat $ {COIN_NAME} -test.txt | grep " ^ hash do genesis: "  |  $ SED  ' s / ^ gênese hash: // ' )
    REGTEST_GENESIS_HASH = $ ( cat $ {COIN_NAME} -regtest.txt | grep " ^ hash do genesis: "  |  $ SED  ' s / ^ gênese do hash: // ' )

    popd
}

newcoin_replace_vars ()
{
    if [ -d  $ COIN_NAME_LOWER ] ;  então
        echo  " Aviso: $ COIN_NAME_LOWER já existente. Não substituindo nenhum valor "
        retornar 0
    fi
    se [ !  -d  " litecoin-master " ] ;  então
        # clone litecoin e manter cache local
        git clone -b $ LITECOIN_BRANCH  $ LITECOIN_REPOS litecoin-master
    outro
        echo  " Atualizando branch master "
        pushd litecoin-master
        git pull
        popd
    fi

    clone git -b $ LITECOIN_BRANCH litecoin-master $ COIN_NAME_LOWER

    pushd  $ COIN_NAME_LOWER

    # primeiro renomeia todos os diretórios
    para  i  em  $ ( find . -tipo d | grep -v " ^. /. git "  | grep litecoin ) ;  Faz 
        git mv $ i  $ ( echo $ i |  $ SED  " s / litecoin / $ COIN_NAME_LOWER / " )
    feito

    # depois renomeie todos os arquivos
    para  i  em  $ ( find . -type f | grep -v " ^. /  .git " | grep litecoin ) ;  Faz
        git mv $ i  $ ( echo $ i |  $ SED  " s / litecoin / $ COIN_NAME_LOWER / " )
    feito

    # agora substitua todas as referências do litecoin pelo novo nome da moeda
    para  i  em  $ ( find . -tipo f | grep -v " ^. /. git " ) ;  Faz
        $ SED -i " s / Litecoin / $ COIN_NAME / g "  $ i
        $ SED -i " s / litecoin / $ COIN_NAME_LOWER / g "  $ i
        $ SED -i " s / LITECOIN / $ COIN_NAME_UPPER / g "  $ i
        $ SED -i " s / LTC / $ COIN_UNIT / g "  $ i
    feito

    $ SED -i " s / 84000000 / $ TOTAL_SUPPLY / " src / amount.h
    $ SED -i " s / 1,48 / 1, $ PUBKEY_CHAR / " src / chainparams.cpp

    $ SED -i " s / 1317972665 / $ TIMESTAMP / " src / chainparams.cpp

    $ SED -i " s; NY Times 05 / Out / 2011 Steve Jobs, visionário da Apple, morre aos 56 anos; $ PHRASE ; " src / chainparams.cpp

    $ SED -i " s / = 9333; / = $ MAINNET_PORT ; / " src / chainparams.cpp
    $ SED -i " s / = 19335; / = $ TESTNET_PORT ; / " src / chainparams.cpp

    $ SED -i " s / $ LITECOIN_PUB_KEY / $ MAIN_PUB_KEY / " src / chainparams.cpp
    $ SED -i " s / $ LITECOIN_MERKLE_HASH / $ MERKLE_HASH / " src / chainparams.cpp
    $ SED -i " s / $ LITECOIN_MERKLE_HASH / $ MERKLE_HASH / " src / qt / teste / rpcnestedtests.cpp

    $ SED -i " 0, / $ LITECOIN_MAIN_GENESIS_HASH / s // $ MAIN_GENESIS_HASH / " src / chainparams.cpp
    $ SED -i " 0, / $ LITECOIN_TEST_GENESIS_HASH / s // $ TEST_GENESIS_HASH / " src / chainparams.cpp
    $ SED -i " 0, / $ LITECOIN_REGTEST_GENESIS_HASH / s // $ REGTEST_GENESIS_HASH / " src / chainparams.cpp

    $ SED -i " 0, / 2084524493 / s // $ MAIN_NONCE / " src / chainparams.cpp
    $ SED -i " 0, / 293345 / s // $ TEST_NONCE / " src / chainparams.cpp
    $ SED -i " 0, / 1296688602, 0 / s // 1296688602, $ REGTEST_NONCE / " src / chainparams.cpp
    $ SED -i " 0, / 0x1e0ffff0 / s // $ BITS / " src / chainparams.cpp

    $ SED -i " s, vSeeds.push_back, // vSeeds.push_back, g " src / chainparams.cpp

    if [ -n  " $ PREMINED_AMOUNT " ] ;  então
        $ SED -i " s / CAmount nSubsidy = 50 \ * COIN; / if \ (nHeight == 1 \) retorna COIN \ * $ PREMINED_AMOUNT ; \ n CAmount nSubsidy = 50 \ * COIN; / " src / validation.cpp
    fi

    $ SED -i " s / COINBASE_MATURITY = 100 / COINBASE_MATURITY = $ COINBASE_MATURITY / " src / consensus / consensus.h

    # redefinir o trabalho de cadeia mínima para 0
    $ SED -i " s / $ MINIMUM_CHAIN_WORK_MAIN / 0x00 / " src / chainparams.cpp
    $ SED -i " s / $ MINIMUM_CHAIN_WORK_TEST / 0x00 / " src / chainparams.cpp

    # alterar as alturas de ativação do bip
    # bip 34
    $ SED -i " s / 710000/0 / " src / chainparams.cpp
    # bip 65
    $ SED -i " s / 918684/0 / " src / chainparams.cpp
    # bip 66
    $ SED -i " s / 811879/0 / " src / chainparams.cpp

    # TODO: corrigir pontos de verificação
    popd
}

build_new_coin ()
{
    # só execute autogen.sh/configure se não for feito anteriormente
    se [ !  -e  $ COIN_NAME_LOWER / Makefile] ;  então
        docker_run " cd / $ COIN_NAME_LOWER ; bash / $ COIN_NAME_LOWER /autogen.sh "
        docker_run " cd / $ COIN_NAME_LOWER ; bash / $ COIN_NAME_LOWER / configure "
    fi
    # sempre construir como o usuário poderia ter manualmente alterado alguns arquivos
    docker_run " cd / $ COIN_NAME_LOWER ; make -j2 "
}


if [ $ DIRNAME  =   " . " ] ;  então
    DIRNAME = $ PWD
fi

cd  $ DIRNAME

# teste de sanidade

caso  $ OSVERSION  em
    Linux * )
        SED = sed
    ;;
    Darwin * )
        SED = $ ( que gsed 2> / dev / null )
        se [ $?  -ne 0] ;  então
            echo  " por favor instale o gnu-sed com 'brew install gnu-sed' "
            sair 1
        fi
        SED = gsed
    ;;
    * )
        echo  " Este script só funciona em Linux e MacOS "
        sair 1
    ;;
esac


se  ! qual docker & > / dev / null ;  então
    echo Por favor instale o docker primeiro
    sair 1
fi

se  ! qual git & > / dev / null ;  então
    echo Por favor, instale git primeiro
    sair 1
fi

caso  $ 1  em
    Pare)
        docker_stop_nodes
    ;;
    remove_nodes)
        docker_stop_nodes
        docker_remove_nodes
    ;;
    Limpar)
        docker_stop_nodes
        para  i  em  $ ( seq 2 5 ) ;  Faz
           docker_run_node $ i  " rm -rf / $ COIN_NAME_LOWER / root /. $ COIN_NAME_LOWER "  & > / dev / null
        feito
        docker_remove_nodes
        docker_remove_network
        rm -rf $ COIN_NAME_LOWER
        if [ " $ 2 "  ! =  " keep_genesis_block " ] ;  então
            rm -f GenesisH0 / $ {COIN_NAME} - * .txt
        fi
        para  i  em  $ ( seq 2 5 ) ;  Faz
           rm -rf minerador $ i
        feito
    ;;
    começar)
        if [ -n  " $ ( docker ps-q -f ancestral = $ DOCKER_IMAGE_LABEL ) " ] ;  então
            echo  " Existem nós em execução. Por favor, pare-os primeiro com: $ 0 stop "
            sair 1
        fi
        docker_build_image
        generate_genesis_block
        newcoin_replace_vars
        build_new_coin
        docker_create_network

        docker_run_node 2 " cd / $ COIN_NAME_LOWER ; ./src/ $ {COIN_NAME_LOWER} d $ CHAIN -listen -noconnect -bind = $ DOCKER_NETWORK .2 -addnode = $ DOCKER_NETWORK .1 -addnode = $ DOCKER_NETWORK .3 -addnode = $ DOCKER_NETWORK . 4 -addnode = $ DOCKER_NETWORK .5 "  &
        docker_run_node 3 " cd / $ COIN_NAME_LOWER ; ./src/ $ {COIN_NAME_LOWER} d $ CHAIN -listen -noconnect -bind = $ DOCKER_NETWORK .3 -addnode = $ DOCKER_NETWORK .1 -addnode = $ DOCKER_NETWORK .2 -addnode = $ DOCKER_NETWORK . 4 -addnode = $ DOCKER_NETWORK .5 "  &
        docker_run_node 4 " cd / $ COIN_NAME_LOWER ; ./src/ $ {COIN_NAME_LOWER} d $ CHAIN -listen -noconnect -bind = $ DOCKER_NETWORK .4 -addnode = $ DOCKER_NETWORK .1 -addnode = $ DOCKER_NETWORK .2 -addnode = $ DOCKER_NETWORK . 3 -addnode = $ DOCKER_NETWORK .5 "  &
        docker_run_node 5 " cd / $ COIN_NAME_LOWER ; ./src/ $ {COIN_NAME_LOWER} d $ CHAIN -listen -noconnect -bind = $ DOCKER_NETWORK .5 -addnode = $ DOCKER_NETWORK .1 -addnode = $ DOCKER_NETWORK .2 -addnode = $ DOCKER_NETWORK . 3 -addnode = $ DOCKER_NETWORK .4 "  &

        echo  "Os contêineres do Docker devem estar ativos e em execução agora. Você pode executar o seguinte comando para verificar o status da rede:
para i em \ $ (docker ps -q); do docker exec \ $ i / $ COIN_NAME_LOWER / src / $ {COIN_NAME_LOWER} -cli $ CHAIN getinfo; feito "
        echo  " Para pedir aos nós que miram alguns blocos, simplesmente execute:
para i em \ $ (docker ps -q); do docker exec \ $ i / $ COIN_NAME_LOWER / src / $ {COIN_NAME_LOWER} -cli $ CHAIN gerar 2 & feito "
        sair 1
    ;;
    * )
        gato << EOF
Uso: $ 0 (start | stop | remove_nodes | clean_up)
 - start: ambiente de bootstrap, construa e execute sua nova moeda
 - pare: basta parar os recipientes sem removê-los
- remove_nodes: remove as imagens antigas do contêiner do Docker. Isso irá pará-los primeiro, se necessário.
- clean_up: ATENÇÃO: isto irá parar e remover contêineres docker e rede, código-fonte, informações do bloco genesis e diretório de dados dos nós. (começar do zero)
EOF
    ;;
esac
